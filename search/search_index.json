{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Introduction Welcome to pheval_phenogenius's documentation!","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#introduction","text":"Welcome to pheval_phenogenius's documentation!","title":"Introduction"},{"location":"api/pheval_phenogenius/cli/","text":"main CLI for pheval_phenogenius. :param verbose: Verbosity while running. :param quiet: Boolean to be quiet or verbose. Usage: main [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default -v , --verbose integer range ( 0 and above) N/A 0 -q , --quiet text N/A None --version boolean Show the version and exit. False --help boolean Show this message and exit. False Subcommands run : Run the pheval_phenogenius's demo command. run Run the pheval_phenogenius's demo command. Usage: main run [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False run Run the pheval_phenogenius's demo command. Usage: run [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"Cli"},{"location":"api/pheval_phenogenius/cli/#main","text":"CLI for pheval_phenogenius. :param verbose: Verbosity while running. :param quiet: Boolean to be quiet or verbose. Usage: main [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default -v , --verbose integer range ( 0 and above) N/A 0 -q , --quiet text N/A None --version boolean Show the version and exit. False --help boolean Show this message and exit. False Subcommands run : Run the pheval_phenogenius's demo command.","title":"main"},{"location":"api/pheval_phenogenius/cli/#run","text":"Run the pheval_phenogenius's demo command. Usage: main run [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"run"},{"location":"api/pheval_phenogenius/cli/#run_1","text":"Run the pheval_phenogenius's demo command. Usage: run [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"run"},{"location":"api/pheval_phenogenius/main/","text":"Main python file. demo () Define API. Source code in src/pheval_phenogenius/main.py 4 5 6 def demo (): \"\"\"Define API.\"\"\" print ( \"Hello, World!\" )","title":"Main"},{"location":"api/pheval_phenogenius/main/#src.pheval_phenogenius.main.demo","text":"Define API. Source code in src/pheval_phenogenius/main.py 4 5 6 def demo (): \"\"\"Define API.\"\"\" print ( \"Hello, World!\" )","title":"demo"},{"location":"api/pheval_phenogenius/runner/","text":"Runner. PhenoGeniusPhEvalRunner dataclass Bases: PhEvalRunner Runner class implementation. Source code in src/pheval_phenogenius/runner.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @dataclass class PhenoGeniusPhEvalRunner ( PhEvalRunner ): \"\"\"Runner class implementation.\"\"\" input_dir : Path testdata_dir : Path tmp_dir : Path output_dir : Path config_file : Path version : str def prepare ( self ): \"\"\"Prepare.\"\"\" print ( \"preparing\" ) def run ( self ): \"\"\"Run.\"\"\" print ( \"running\" ) run ( testdata_dir = self . testdata_dir , input_dir = self . input_dir , raw_results_dir = self . raw_results_dir , tool_input_commands_dir = self . tool_input_commands_dir , ) def post_process ( self ): \"\"\"Post Process.\"\"\" print ( \"post processing\" ) post_process_results_format ( raw_results_dir = self . raw_results_dir , output_dir = self . output_dir , ) post_process () Post Process. Source code in src/pheval_phenogenius/runner.py 37 38 39 40 41 42 43 def post_process ( self ): \"\"\"Post Process.\"\"\" print ( \"post processing\" ) post_process_results_format ( raw_results_dir = self . raw_results_dir , output_dir = self . output_dir , ) prepare () Prepare. Source code in src/pheval_phenogenius/runner.py 23 24 25 def prepare ( self ): \"\"\"Prepare.\"\"\" print ( \"preparing\" ) run () Run. Source code in src/pheval_phenogenius/runner.py 27 28 29 30 31 32 33 34 35 def run ( self ): \"\"\"Run.\"\"\" print ( \"running\" ) run ( testdata_dir = self . testdata_dir , input_dir = self . input_dir , raw_results_dir = self . raw_results_dir , tool_input_commands_dir = self . tool_input_commands_dir , )","title":"Runner"},{"location":"api/pheval_phenogenius/runner/#src.pheval_phenogenius.runner.PhenoGeniusPhEvalRunner","text":"Bases: PhEvalRunner Runner class implementation. Source code in src/pheval_phenogenius/runner.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @dataclass class PhenoGeniusPhEvalRunner ( PhEvalRunner ): \"\"\"Runner class implementation.\"\"\" input_dir : Path testdata_dir : Path tmp_dir : Path output_dir : Path config_file : Path version : str def prepare ( self ): \"\"\"Prepare.\"\"\" print ( \"preparing\" ) def run ( self ): \"\"\"Run.\"\"\" print ( \"running\" ) run ( testdata_dir = self . testdata_dir , input_dir = self . input_dir , raw_results_dir = self . raw_results_dir , tool_input_commands_dir = self . tool_input_commands_dir , ) def post_process ( self ): \"\"\"Post Process.\"\"\" print ( \"post processing\" ) post_process_results_format ( raw_results_dir = self . raw_results_dir , output_dir = self . output_dir , )","title":"PhenoGeniusPhEvalRunner"},{"location":"api/pheval_phenogenius/runner/#src.pheval_phenogenius.runner.PhenoGeniusPhEvalRunner.post_process","text":"Post Process. Source code in src/pheval_phenogenius/runner.py 37 38 39 40 41 42 43 def post_process ( self ): \"\"\"Post Process.\"\"\" print ( \"post processing\" ) post_process_results_format ( raw_results_dir = self . raw_results_dir , output_dir = self . output_dir , )","title":"post_process"},{"location":"api/pheval_phenogenius/runner/#src.pheval_phenogenius.runner.PhenoGeniusPhEvalRunner.prepare","text":"Prepare. Source code in src/pheval_phenogenius/runner.py 23 24 25 def prepare ( self ): \"\"\"Prepare.\"\"\" print ( \"preparing\" )","title":"prepare"},{"location":"api/pheval_phenogenius/runner/#src.pheval_phenogenius.runner.PhenoGeniusPhEvalRunner.run","text":"Run. Source code in src/pheval_phenogenius/runner.py 27 28 29 30 31 32 33 34 35 def run ( self ): \"\"\"Run.\"\"\" print ( \"running\" ) run ( testdata_dir = self . testdata_dir , input_dir = self . input_dir , raw_results_dir = self . raw_results_dir , tool_input_commands_dir = self . tool_input_commands_dir , )","title":"run"},{"location":"api/pheval_phenogenius/post_process/post_process/","text":"Post-processing functions. post_process_results_format ( raw_results_dir , output_dir ) Post-process PhenoGenius result to PhEval gene results. Parameters: Name Type Description Default raw_results_dir Path Path to raw results directory. required output_dir Path Path to output directory. required Source code in src/pheval_phenogenius/post_process/post_process.py 8 9 10 11 12 13 14 15 16 17 18 19 def post_process_results_format ( raw_results_dir : Path , output_dir : Path ) -> None : \"\"\" Post-process PhenoGenius result to PhEval gene results. Args: raw_results_dir (Path): Path to raw results directory. output_dir (Path): Path to output directory. \"\"\" print ( \"...creating pheval gene results format...\" ) create_standardised_results ( results_dir = raw_results_dir , output_dir = output_dir , sort_order = \"DESCENDING\" ) print ( \"done\" )","title":"Post process"},{"location":"api/pheval_phenogenius/post_process/post_process/#src.pheval_phenogenius.post_process.post_process.post_process_results_format","text":"Post-process PhenoGenius result to PhEval gene results. Parameters: Name Type Description Default raw_results_dir Path Path to raw results directory. required output_dir Path Path to output directory. required Source code in src/pheval_phenogenius/post_process/post_process.py 8 9 10 11 12 13 14 15 16 17 18 19 def post_process_results_format ( raw_results_dir : Path , output_dir : Path ) -> None : \"\"\" Post-process PhenoGenius result to PhEval gene results. Args: raw_results_dir (Path): Path to raw results directory. output_dir (Path): Path to output directory. \"\"\" print ( \"...creating pheval gene results format...\" ) create_standardised_results ( results_dir = raw_results_dir , output_dir = output_dir , sort_order = \"DESCENDING\" ) print ( \"done\" )","title":"post_process_results_format"},{"location":"api/pheval_phenogenius/post_process/post_process_results_format/","text":"Post-process results from post-processing pipeline. PhEvalGeneResultFromPhenoGeniusCreator Class for converting PhenoGenius results to PhEvalGeneResults. Source code in src/pheval_phenogenius/post_process/post_process_results_format.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 class PhEvalGeneResultFromPhenoGeniusCreator : \"\"\"Class for converting PhenoGenius results to PhEvalGeneResults.\"\"\" def __init__ ( self , phenogenius_result : pd . DataFrame , gene_identifier_updator : GeneIdentifierUpdater ): \"\"\"Initialise PhEvalGeneResultFromPhenoGeniusCreator.\"\"\" self . phenogenius_result = phenogenius_result self . gene_identifier_updator = gene_identifier_updator @staticmethod def _find_gene_symbol ( result_entry : pd . Series ) -> str : \"\"\" Find the gene symbol for a result. Args: result_entry (pd.Series): PhenoGenius TSV result. Returns: str: Gene symbol. \"\"\" return result_entry [ \"gene_symbol\" ] def _find_gene_identifier ( self , result_entry : pd . Series ) -> str : \"\"\" Find the gene identifier for a result. Args: result_entry (pd.Series): PhenoGenius TSV result. Returns: str: Gene identifier. \"\"\" return self . gene_identifier_updator . find_identifier ( result_entry [ \"gene_symbol\" ]) @staticmethod def _find_score ( result_entry : pd . Series ) -> float : \"\"\" Find the score for a result. Args: result_entry (pd.Series): PhenoGenius TSV result. Returns: float: Score. \"\"\" return result_entry [ \"score\" ] def extract_pheval_gene_requirements ( self ) -> List [ PhEvalGeneResult ]: \"\"\" Extract data required to produce PhEval gene output. Returns: List[PhEvalGeneResult]: List of PhEvalGeneResult objects. \"\"\" simplified_phenogenius_result = [] for _index , row in self . phenogenius_result . iterrows (): simplified_phenogenius_result . append ( PhEvalGeneResult ( gene_symbol = self . _find_gene_symbol ( row ), gene_identifier = self . _find_gene_identifier ( row ), score = self . _find_score ( row ), ) ) return simplified_phenogenius_result __init__ ( phenogenius_result , gene_identifier_updator ) Initialise PhEvalGeneResultFromPhenoGeniusCreator. Source code in src/pheval_phenogenius/post_process/post_process_results_format.py 29 30 31 32 def __init__ ( self , phenogenius_result : pd . DataFrame , gene_identifier_updator : GeneIdentifierUpdater ): \"\"\"Initialise PhEvalGeneResultFromPhenoGeniusCreator.\"\"\" self . phenogenius_result = phenogenius_result self . gene_identifier_updator = gene_identifier_updator extract_pheval_gene_requirements () Extract data required to produce PhEval gene output. Returns: Type Description List [ PhEvalGeneResult ] List[PhEvalGeneResult]: List of PhEvalGeneResult objects. Source code in src/pheval_phenogenius/post_process/post_process_results_format.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def extract_pheval_gene_requirements ( self ) -> List [ PhEvalGeneResult ]: \"\"\" Extract data required to produce PhEval gene output. Returns: List[PhEvalGeneResult]: List of PhEvalGeneResult objects. \"\"\" simplified_phenogenius_result = [] for _index , row in self . phenogenius_result . iterrows (): simplified_phenogenius_result . append ( PhEvalGeneResult ( gene_symbol = self . _find_gene_symbol ( row ), gene_identifier = self . _find_gene_identifier ( row ), score = self . _find_score ( row ), ) ) return simplified_phenogenius_result create_standardised_results ( results_dir , output_dir , sort_order ) Write standardised gene results from default PhenoGenius TSV output. Parameters: Name Type Description Default results_dir Path Path to the raw results directory. required output_dir Path Path to the output directory. required sort_order str The sort order of the results, either ascending or descending. required Source code in src/pheval_phenogenius/post_process/post_process_results_format.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def create_standardised_results ( results_dir : Path , output_dir : Path , sort_order : str ) -> None : \"\"\" Write standardised gene results from default PhenoGenius TSV output. Args: results_dir (Path): Path to the raw results directory. output_dir (Path): Path to the output directory. sort_order (str): The sort order of the results, either ascending or descending. \"\"\" hgnc_data = create_hgnc_dict () gene_identifier_updator = GeneIdentifierUpdater ( hgnc_data = hgnc_data , gene_identifier = \"ensembl_id\" ) for result in all_files ( results_dir ): phenogenius_tsv = read_phenogenius_result ( result ) pheval_gene_result = PhEvalGeneResultFromPhenoGeniusCreator ( phenogenius_tsv , gene_identifier_updator ) . extract_pheval_gene_requirements () generate_pheval_result ( pheval_result = pheval_gene_result , sort_order_str = sort_order , output_dir = output_dir , tool_result_path = result , ) read_phenogenius_result ( phenogenius_result ) Read PhenoGenius results from a PhenoGenius TSV result file. Parameters: Name Type Description Default phenogenius_result Path Path to a PhenoGenius TSV result file. required Returns: Type Description DataFrame pd.DataFrame: PhenoGenius results from a PhenoGenius TSV result file. Source code in src/pheval_phenogenius/post_process/post_process_results_format.py 12 13 14 15 16 17 18 19 20 21 22 23 def read_phenogenius_result ( phenogenius_result : Path ) -> pd . DataFrame : \"\"\" Read PhenoGenius results from a PhenoGenius TSV result file. Args: phenogenius_result (Path): Path to a PhenoGenius TSV result file. Returns: pd.DataFrame: PhenoGenius results from a PhenoGenius TSV result file. \"\"\" return pd . read_csv ( phenogenius_result , delimiter = \" \\t \" )","title":"Post process results format"},{"location":"api/pheval_phenogenius/post_process/post_process_results_format/#src.pheval_phenogenius.post_process.post_process_results_format.PhEvalGeneResultFromPhenoGeniusCreator","text":"Class for converting PhenoGenius results to PhEvalGeneResults. Source code in src/pheval_phenogenius/post_process/post_process_results_format.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 class PhEvalGeneResultFromPhenoGeniusCreator : \"\"\"Class for converting PhenoGenius results to PhEvalGeneResults.\"\"\" def __init__ ( self , phenogenius_result : pd . DataFrame , gene_identifier_updator : GeneIdentifierUpdater ): \"\"\"Initialise PhEvalGeneResultFromPhenoGeniusCreator.\"\"\" self . phenogenius_result = phenogenius_result self . gene_identifier_updator = gene_identifier_updator @staticmethod def _find_gene_symbol ( result_entry : pd . Series ) -> str : \"\"\" Find the gene symbol for a result. Args: result_entry (pd.Series): PhenoGenius TSV result. Returns: str: Gene symbol. \"\"\" return result_entry [ \"gene_symbol\" ] def _find_gene_identifier ( self , result_entry : pd . Series ) -> str : \"\"\" Find the gene identifier for a result. Args: result_entry (pd.Series): PhenoGenius TSV result. Returns: str: Gene identifier. \"\"\" return self . gene_identifier_updator . find_identifier ( result_entry [ \"gene_symbol\" ]) @staticmethod def _find_score ( result_entry : pd . Series ) -> float : \"\"\" Find the score for a result. Args: result_entry (pd.Series): PhenoGenius TSV result. Returns: float: Score. \"\"\" return result_entry [ \"score\" ] def extract_pheval_gene_requirements ( self ) -> List [ PhEvalGeneResult ]: \"\"\" Extract data required to produce PhEval gene output. Returns: List[PhEvalGeneResult]: List of PhEvalGeneResult objects. \"\"\" simplified_phenogenius_result = [] for _index , row in self . phenogenius_result . iterrows (): simplified_phenogenius_result . append ( PhEvalGeneResult ( gene_symbol = self . _find_gene_symbol ( row ), gene_identifier = self . _find_gene_identifier ( row ), score = self . _find_score ( row ), ) ) return simplified_phenogenius_result","title":"PhEvalGeneResultFromPhenoGeniusCreator"},{"location":"api/pheval_phenogenius/post_process/post_process_results_format/#src.pheval_phenogenius.post_process.post_process_results_format.PhEvalGeneResultFromPhenoGeniusCreator.__init__","text":"Initialise PhEvalGeneResultFromPhenoGeniusCreator. Source code in src/pheval_phenogenius/post_process/post_process_results_format.py 29 30 31 32 def __init__ ( self , phenogenius_result : pd . DataFrame , gene_identifier_updator : GeneIdentifierUpdater ): \"\"\"Initialise PhEvalGeneResultFromPhenoGeniusCreator.\"\"\" self . phenogenius_result = phenogenius_result self . gene_identifier_updator = gene_identifier_updator","title":"__init__"},{"location":"api/pheval_phenogenius/post_process/post_process_results_format/#src.pheval_phenogenius.post_process.post_process_results_format.PhEvalGeneResultFromPhenoGeniusCreator.extract_pheval_gene_requirements","text":"Extract data required to produce PhEval gene output. Returns: Type Description List [ PhEvalGeneResult ] List[PhEvalGeneResult]: List of PhEvalGeneResult objects. Source code in src/pheval_phenogenius/post_process/post_process_results_format.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def extract_pheval_gene_requirements ( self ) -> List [ PhEvalGeneResult ]: \"\"\" Extract data required to produce PhEval gene output. Returns: List[PhEvalGeneResult]: List of PhEvalGeneResult objects. \"\"\" simplified_phenogenius_result = [] for _index , row in self . phenogenius_result . iterrows (): simplified_phenogenius_result . append ( PhEvalGeneResult ( gene_symbol = self . _find_gene_symbol ( row ), gene_identifier = self . _find_gene_identifier ( row ), score = self . _find_score ( row ), ) ) return simplified_phenogenius_result","title":"extract_pheval_gene_requirements"},{"location":"api/pheval_phenogenius/post_process/post_process_results_format/#src.pheval_phenogenius.post_process.post_process_results_format.create_standardised_results","text":"Write standardised gene results from default PhenoGenius TSV output. Parameters: Name Type Description Default results_dir Path Path to the raw results directory. required output_dir Path Path to the output directory. required sort_order str The sort order of the results, either ascending or descending. required Source code in src/pheval_phenogenius/post_process/post_process_results_format.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def create_standardised_results ( results_dir : Path , output_dir : Path , sort_order : str ) -> None : \"\"\" Write standardised gene results from default PhenoGenius TSV output. Args: results_dir (Path): Path to the raw results directory. output_dir (Path): Path to the output directory. sort_order (str): The sort order of the results, either ascending or descending. \"\"\" hgnc_data = create_hgnc_dict () gene_identifier_updator = GeneIdentifierUpdater ( hgnc_data = hgnc_data , gene_identifier = \"ensembl_id\" ) for result in all_files ( results_dir ): phenogenius_tsv = read_phenogenius_result ( result ) pheval_gene_result = PhEvalGeneResultFromPhenoGeniusCreator ( phenogenius_tsv , gene_identifier_updator ) . extract_pheval_gene_requirements () generate_pheval_result ( pheval_result = pheval_gene_result , sort_order_str = sort_order , output_dir = output_dir , tool_result_path = result , )","title":"create_standardised_results"},{"location":"api/pheval_phenogenius/post_process/post_process_results_format/#src.pheval_phenogenius.post_process.post_process_results_format.read_phenogenius_result","text":"Read PhenoGenius results from a PhenoGenius TSV result file. Parameters: Name Type Description Default phenogenius_result Path Path to a PhenoGenius TSV result file. required Returns: Type Description DataFrame pd.DataFrame: PhenoGenius results from a PhenoGenius TSV result file. Source code in src/pheval_phenogenius/post_process/post_process_results_format.py 12 13 14 15 16 17 18 19 20 21 22 23 def read_phenogenius_result ( phenogenius_result : Path ) -> pd . DataFrame : \"\"\" Read PhenoGenius results from a PhenoGenius TSV result file. Args: phenogenius_result (Path): Path to a PhenoGenius TSV result file. Returns: pd.DataFrame: PhenoGenius results from a PhenoGenius TSV result file. \"\"\" return pd . read_csv ( phenogenius_result , delimiter = \" \\t \" )","title":"read_phenogenius_result"},{"location":"api/pheval_phenogenius/run/prepare_commands/","text":"Prepare commands functions. CommandsWriter Class to write commands to a file. Source code in src/pheval_phenogenius/run/prepare_commands.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 class CommandsWriter : \"\"\"Class to write commands to a file.\"\"\" def __init__ ( self , output_file : Path ): \"\"\"Initialise \"CommandsWriter.\"\"\" self . output_file = open ( output_file , \"w\" ) def write_command ( self , parameters : PhenoGeniusParameters ) -> None : \"\"\" Write command to file. Args: parameters: Parameters for a sample. \"\"\" self . output_file . write ( f \"python \" f \" { parameters . python_executable } \" f \"--hpo_list \" f \" { ',' . join ( parameters . hpo_list ) } \" f \"--result_file \" f \" { parameters . result_file } \\n \" ) def close ( self ): \"\"\"Close output file.\"\"\" self . output_file . close () __init__ ( output_file ) Initialise \"CommandsWriter. Source code in src/pheval_phenogenius/run/prepare_commands.py 79 80 81 def __init__ ( self , output_file : Path ): \"\"\"Initialise \"CommandsWriter.\"\"\" self . output_file = open ( output_file , \"w\" ) close () Close output file. Source code in src/pheval_phenogenius/run/prepare_commands.py 100 101 102 def close ( self ): \"\"\"Close output file.\"\"\" self . output_file . close () write_command ( parameters ) Write command to file. Parameters: Name Type Description Default parameters PhenoGeniusParameters Parameters for a sample. required Source code in src/pheval_phenogenius/run/prepare_commands.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def write_command ( self , parameters : PhenoGeniusParameters ) -> None : \"\"\" Write command to file. Args: parameters: Parameters for a sample. \"\"\" self . output_file . write ( f \"python \" f \" { parameters . python_executable } \" f \"--hpo_list \" f \" { ',' . join ( parameters . hpo_list ) } \" f \"--result_file \" f \" { parameters . result_file } \\n \" ) PhenoGeniusParameters dataclass Class to store PhenoGenius parameters. Source code in src/pheval_phenogenius/run/prepare_commands.py 11 12 13 14 15 16 17 @dataclass class PhenoGeniusParameters : \"\"\"Class to store PhenoGenius parameters.\"\"\" python_executable : Path hpo_list : List [ str ] result_file : Path get_parameters ( phenopacket_dir , input_dir , raw_results_dir ) Create PhenoGenius parameters for a corpus. Parameters: Name Type Description Default phenopacket_dir Path Path to Phenopacket directory. required input_dir Path Path to input directory. required raw_results_dir Path Path to raw results directory. required Returns: Type Description List [ PhenoGeniusParameters ] List[PhenoGeniusParameters]: Parameters for a corpus. Source code in src/pheval_phenogenius/run/prepare_commands.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def get_parameters ( phenopacket_dir : Path , input_dir : Path , raw_results_dir : Path ) -> List [ PhenoGeniusParameters ]: \"\"\" Create PhenoGenius parameters for a corpus. Args: phenopacket_dir: Path to Phenopacket directory. input_dir: Path to input directory. raw_results_dir: Path to raw results directory. Returns: List[PhenoGeniusParameters]: Parameters for a corpus. \"\"\" parameters = [] for phenopacket_path in all_files ( phenopacket_dir ): parameters . append ( _create_parameter_for_sample ( phenopacket_path , input_dir , raw_results_dir )) return parameters write_commands ( phenopacket_dir , input_dir , raw_results_dir , tool_input_commands_dir ) Write all commands for a corpus. Parameters: Name Type Description Default phenopacket_dir Path Path to Phenopacket directory. required input_dir Path Path to input directory. required raw_results_dir Path Path to raw results directory. required tool_input_commands_dir Path Path to tool input directory. required Source code in src/pheval_phenogenius/run/prepare_commands.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def write_commands ( phenopacket_dir : Path , input_dir : Path , raw_results_dir : Path , tool_input_commands_dir : Path ) -> None : \"\"\" Write all commands for a corpus. Args: phenopacket_dir: Path to Phenopacket directory. input_dir: Path to input directory. raw_results_dir: Path to raw results directory. tool_input_commands_dir: Path to tool input directory. \"\"\" parameters = get_parameters ( phenopacket_dir , input_dir , raw_results_dir ) command_writer = CommandsWriter ( tool_input_commands_dir . joinpath ( phenopacket_dir . parent . name + \"_commands.tsv\" )) for parameter in parameters : command_writer . write_command ( parameter ) command_writer . close ()","title":"Prepare commands"},{"location":"api/pheval_phenogenius/run/prepare_commands/#src.pheval_phenogenius.run.prepare_commands.CommandsWriter","text":"Class to write commands to a file. Source code in src/pheval_phenogenius/run/prepare_commands.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 class CommandsWriter : \"\"\"Class to write commands to a file.\"\"\" def __init__ ( self , output_file : Path ): \"\"\"Initialise \"CommandsWriter.\"\"\" self . output_file = open ( output_file , \"w\" ) def write_command ( self , parameters : PhenoGeniusParameters ) -> None : \"\"\" Write command to file. Args: parameters: Parameters for a sample. \"\"\" self . output_file . write ( f \"python \" f \" { parameters . python_executable } \" f \"--hpo_list \" f \" { ',' . join ( parameters . hpo_list ) } \" f \"--result_file \" f \" { parameters . result_file } \\n \" ) def close ( self ): \"\"\"Close output file.\"\"\" self . output_file . close ()","title":"CommandsWriter"},{"location":"api/pheval_phenogenius/run/prepare_commands/#src.pheval_phenogenius.run.prepare_commands.CommandsWriter.__init__","text":"Initialise \"CommandsWriter. Source code in src/pheval_phenogenius/run/prepare_commands.py 79 80 81 def __init__ ( self , output_file : Path ): \"\"\"Initialise \"CommandsWriter.\"\"\" self . output_file = open ( output_file , \"w\" )","title":"__init__"},{"location":"api/pheval_phenogenius/run/prepare_commands/#src.pheval_phenogenius.run.prepare_commands.CommandsWriter.close","text":"Close output file. Source code in src/pheval_phenogenius/run/prepare_commands.py 100 101 102 def close ( self ): \"\"\"Close output file.\"\"\" self . output_file . close ()","title":"close"},{"location":"api/pheval_phenogenius/run/prepare_commands/#src.pheval_phenogenius.run.prepare_commands.CommandsWriter.write_command","text":"Write command to file. Parameters: Name Type Description Default parameters PhenoGeniusParameters Parameters for a sample. required Source code in src/pheval_phenogenius/run/prepare_commands.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def write_command ( self , parameters : PhenoGeniusParameters ) -> None : \"\"\" Write command to file. Args: parameters: Parameters for a sample. \"\"\" self . output_file . write ( f \"python \" f \" { parameters . python_executable } \" f \"--hpo_list \" f \" { ',' . join ( parameters . hpo_list ) } \" f \"--result_file \" f \" { parameters . result_file } \\n \" )","title":"write_command"},{"location":"api/pheval_phenogenius/run/prepare_commands/#src.pheval_phenogenius.run.prepare_commands.PhenoGeniusParameters","text":"Class to store PhenoGenius parameters. Source code in src/pheval_phenogenius/run/prepare_commands.py 11 12 13 14 15 16 17 @dataclass class PhenoGeniusParameters : \"\"\"Class to store PhenoGenius parameters.\"\"\" python_executable : Path hpo_list : List [ str ] result_file : Path","title":"PhenoGeniusParameters"},{"location":"api/pheval_phenogenius/run/prepare_commands/#src.pheval_phenogenius.run.prepare_commands.get_parameters","text":"Create PhenoGenius parameters for a corpus. Parameters: Name Type Description Default phenopacket_dir Path Path to Phenopacket directory. required input_dir Path Path to input directory. required raw_results_dir Path Path to raw results directory. required Returns: Type Description List [ PhenoGeniusParameters ] List[PhenoGeniusParameters]: Parameters for a corpus. Source code in src/pheval_phenogenius/run/prepare_commands.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def get_parameters ( phenopacket_dir : Path , input_dir : Path , raw_results_dir : Path ) -> List [ PhenoGeniusParameters ]: \"\"\" Create PhenoGenius parameters for a corpus. Args: phenopacket_dir: Path to Phenopacket directory. input_dir: Path to input directory. raw_results_dir: Path to raw results directory. Returns: List[PhenoGeniusParameters]: Parameters for a corpus. \"\"\" parameters = [] for phenopacket_path in all_files ( phenopacket_dir ): parameters . append ( _create_parameter_for_sample ( phenopacket_path , input_dir , raw_results_dir )) return parameters","title":"get_parameters"},{"location":"api/pheval_phenogenius/run/prepare_commands/#src.pheval_phenogenius.run.prepare_commands.write_commands","text":"Write all commands for a corpus. Parameters: Name Type Description Default phenopacket_dir Path Path to Phenopacket directory. required input_dir Path Path to input directory. required raw_results_dir Path Path to raw results directory. required tool_input_commands_dir Path Path to tool input directory. required Source code in src/pheval_phenogenius/run/prepare_commands.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def write_commands ( phenopacket_dir : Path , input_dir : Path , raw_results_dir : Path , tool_input_commands_dir : Path ) -> None : \"\"\" Write all commands for a corpus. Args: phenopacket_dir: Path to Phenopacket directory. input_dir: Path to input directory. raw_results_dir: Path to raw results directory. tool_input_commands_dir: Path to tool input directory. \"\"\" parameters = get_parameters ( phenopacket_dir , input_dir , raw_results_dir ) command_writer = CommandsWriter ( tool_input_commands_dir . joinpath ( phenopacket_dir . parent . name + \"_commands.tsv\" )) for parameter in parameters : command_writer . write_command ( parameter ) command_writer . close ()","title":"write_commands"},{"location":"api/pheval_phenogenius/run/run/","text":"Run functions. run ( testdata_dir , input_dir , raw_results_dir , tool_input_commands_dir ) Run the commands on the phenopackets corpus. Parameters: Name Type Description Default testdata_dir Path Path to the test data directory. required input_dir Path Path to the input directory. required raw_results_dir Path Path to the raw results directory. required tool_input_commands_dir Path Path to the tool input commands directory. required Source code in src/pheval_phenogenius/run/run.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def run ( testdata_dir : Path , input_dir : Path , raw_results_dir : Path , tool_input_commands_dir : Path ) -> None : \"\"\" Run the commands on the phenopackets corpus. Args: testdata_dir (Path): Path to the test data directory. input_dir (Path): Path to the input directory. raw_results_dir (Path): Path to the raw results directory. tool_input_commands_dir (Path): Path to the tool input commands directory. \"\"\" os . chdir ( input_dir . joinpath ( \"PhenoGeniusCli\" )) write_commands ( testdata_dir . joinpath ( \"phenopackets\" ), input_dir , raw_results_dir , tool_input_commands_dir ) print ( \"Running commands...\" ) subprocess . run ( [ \"bash\" , str ( tool_input_commands_dir . joinpath ( testdata_dir . name + \"_commands.tsv\" ))], shell = False ) # noqa","title":"Run"},{"location":"api/pheval_phenogenius/run/run/#src.pheval_phenogenius.run.run.run","text":"Run the commands on the phenopackets corpus. Parameters: Name Type Description Default testdata_dir Path Path to the test data directory. required input_dir Path Path to the input directory. required raw_results_dir Path Path to the raw results directory. required tool_input_commands_dir Path Path to the tool input commands directory. required Source code in src/pheval_phenogenius/run/run.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def run ( testdata_dir : Path , input_dir : Path , raw_results_dir : Path , tool_input_commands_dir : Path ) -> None : \"\"\" Run the commands on the phenopackets corpus. Args: testdata_dir (Path): Path to the test data directory. input_dir (Path): Path to the input directory. raw_results_dir (Path): Path to the raw results directory. tool_input_commands_dir (Path): Path to the tool input commands directory. \"\"\" os . chdir ( input_dir . joinpath ( \"PhenoGeniusCli\" )) write_commands ( testdata_dir . joinpath ( \"phenopackets\" ), input_dir , raw_results_dir , tool_input_commands_dir ) print ( \"Running commands...\" ) subprocess . run ( [ \"bash\" , str ( tool_input_commands_dir . joinpath ( testdata_dir . name + \"_commands.tsv\" ))], shell = False ) # noqa","title":"run"}]}